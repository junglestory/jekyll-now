<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-01T15:22:31+09:00</updated><id>http://localhost:4000/</id><title type="html">IT Blog</title><subtitle>Development &amp; Technical Training</subtitle><entry><title type="html">Openfire 에서 Open Graph 플러그인 구현</title><link href="http://localhost:4000/openfire-plugin-opengraph" rel="alternate" type="text/html" title="Openfire 에서 Open Graph 플러그인 구현" /><published>2018-04-20T00:00:00+09:00</published><updated>2018-04-20T00:00:00+09:00</updated><id>http://localhost:4000/openfire-plugin-opengraph</id><content type="html" xml:base="http://localhost:4000/openfire-plugin-opengraph">&lt;p&gt;페이스북이나 카카오톡에서 URL 링크을 보내면 해당 URL 페이지의 미리보기(제목, 내용, 이미지… 등) 기능을 제공한다.
Openfire에서는 아직 URL 미리보기 기능이 없기에 플러그인으로 구현하는 방법을 올려본다.&lt;/p&gt;

&lt;h2 id=&quot;opengraph-플러그인의-기능-구성&quot;&gt;Opengraph 플러그인의 기능 구성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;패킷을 가로채서 메시지 여부 판단&lt;/li&gt;
  &lt;li&gt;URL 메시지 여부 판단&lt;/li&gt;
  &lt;li&gt;Open Graph 태그 파싱&lt;/li&gt;
  &lt;li&gt;Open Graph 태그가 없는 경우 본문에서 태그 추출&lt;/li&gt;
  &lt;li&gt;파싱한 태그를 패킷에 Append 해서 브로드캐스팅&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;opengraph-플러그인-개발&quot;&gt;Opengraph 플러그인 개발&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Openfire 소스를 &lt;strong&gt;&lt;a href=&quot;https://www.igniterealtime.org/downloads/source.jsp&quot;&gt;다운로드&lt;/a&gt;&lt;/strong&gt; 받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Eclipse에 Openfire 소스를 Import 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Opengraph 프로젝트를 생성한다.
 openfire/src/plugins 경로 밑에 opengraph 폴더를 생성한다. 그리고, opengraph 폴더 아래에 src/java/com/mydomain/openfire/opengraph 폴더를 생성하고, plugin.xml 과 pom.xml 파일을 생성한다.&lt;/p&gt;

    &lt;p&gt;plugin.xml 에는 플러그인의 메인 클래스와 플러그인 정보를 설정한다.&lt;/p&gt;
    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mydomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;openfire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opengraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OpenGraphPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/class&amp;gt;

     &amp;lt;!-- Plugin meta-data --&amp;gt;
     &amp;lt;name&amp;gt;Open Graph Parser&amp;lt;/n&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/description&amp;gt;
     &amp;lt;author&amp;gt;mycompany&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/version&amp;gt;
     &amp;lt;date&amp;gt;03/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/date&amp;gt;
 &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;pom.xml 에는 플러그인, 개발자, 라이브러리 그리고 빌드 정보를 설정한다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
      xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
 	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
 	&amp;lt;parent&amp;gt;
     	&amp;lt;artifactId&amp;gt;plugins&amp;lt;/artifactId&amp;gt;
     	&amp;lt;groupId&amp;gt;org.igniterealtime.openfire&amp;lt;/groupId&amp;gt;
     	&amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
 	&amp;lt;/parent&amp;gt;
 	&amp;lt;groupId&amp;gt;org.igniterealtime.openfire.plugins&amp;lt;/groupId&amp;gt;
 	&amp;lt;artifactId&amp;gt;openGraph&amp;lt;/artifactId&amp;gt;
 	&amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
 	&amp;lt;name&amp;gt;Open Graph Plugin&amp;lt;/name&amp;gt;
 	&amp;lt;description&amp;gt;Parses to Open Graph tags&amp;lt;/description&amp;gt;

 	&amp;lt;developers&amp;gt;
     	&amp;lt;developer&amp;gt;
         	&amp;lt;id&amp;gt;develpoer&amp;lt;/id&amp;gt;
         	&amp;lt;name&amp;gt;develpoer&amp;lt;/name&amp;gt;
         	&amp;lt;email&amp;gt;developer@mydomain.com&amp;lt;/email&amp;gt;
         	&amp;lt;organization&amp;gt;myorganization&amp;lt;/organization&amp;gt;
         	&amp;lt;organizationUrl&amp;gt;https://www.mydomain.com&amp;lt;/organizationUrl&amp;gt;
     	&amp;lt;/developer&amp;gt;
 	&amp;lt;/developers&amp;gt;

     &amp;lt;dependencies&amp;gt;  
     	&amp;lt;dependency&amp;gt;
       	&amp;lt;groupId&amp;gt;org.jsoup&amp;lt;/groupId&amp;gt;
       	&amp;lt;artifactId&amp;gt;jsoup&amp;lt;/artifactId&amp;gt;
       	&amp;lt;version&amp;gt;1.10.2&amp;lt;/version&amp;gt;
     	&amp;lt;/dependency&amp;gt;
   	&amp;lt;/dependencies&amp;gt;
	  
 	&amp;lt;build&amp;gt;
     	&amp;lt;sourceDirectory&amp;gt;src/java&amp;lt;/sourceDirectory&amp;gt;
     	&amp;lt;plugins&amp;gt;
         	&amp;lt;plugin&amp;gt;
             	&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
         	&amp;lt;/plugin&amp;gt;
     	&amp;lt;/plugins&amp;gt;
 	&amp;lt;/build&amp;gt;
 &amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jsoup 라이브러리를 추가한다.
&lt;a href=&quot;https://jsoup.org/download&quot;&gt;jsoup&lt;/a&gt; 라이브러리를 다운로드 받아서, src/java/com/mydomain/openfire/opengraph 폴더에  lib 폴더를 생성 후 다운로드 받은 jsoup 라이브러리를 추가한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build Path에 Opengraph Plugin 소스 폴더를 추가한다.
 Eclipse에서 Properties &amp;gt; Java Build Path &amp;gt; Source &amp;gt; Add Folder 버튼을 클릭해서 opengraph &amp;gt; src &amp;gt; java 폴더를 선택한다. 그리고, “OK” 버튼을 클릭해서  Opengraph Plugin 소스 폴더를 Build Path에 추가한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Plugin 인터페이스를 구현한다.
 src/java/com/mydomain/openfire/opengraph 디렉토리에 OpenGraphPlugin.java 을 생성하고 아래 소스를 입력한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import org.jivesoftware.openfire.container.Plugin;
 import org.jivesoftware.openfire.container.PluginManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.io.File;

 public class OpenGraphPlugin implements Plugin  {
     private static final Logger Log = LoggerFactory.getLogger(OpenGraphPlugin.class);
        
 	public OpenGraphPlugin() {
 	}
    
 	// 플러그인 초기화
 	public void initializePlugin(PluginManager manager, File pluginDirectory) {
    		Log.info(&quot;Open graph parser plugin initialize ...&quot;);
 	}
    
 	// 플러그인 종료
 	public void destroyPlugin() {
    		Log.info(&quot;Open graph parser plugin destory ...&quot;);
 	}
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;패킷 가로채기 기능을 추가한다.
 implements 에 PacketInterceptor를 추가한다. 그리고, 생성자에 Instance를 추가하고, initializePlugins에는 메시지 Interceptor를 등록을 추가하고, destoryPlugin에는 등록된 Interceptor를 제거를 추가한다. 메시지 패킷을 확인하기 위해 interceptPacket과 isValidTargetPacket 을 추가한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import org.jivesoftware.openfire.container.Plugin;
 import org.jivesoftware.openfire.container.PluginManager;
 import org.jivesoftware.openfire.interceptor.InterceptorManager;
 import org.jivesoftware.openfire.interceptor.PacketInterceptor;
 import org.jivesoftware.openfire.interceptor.PacketRejectedException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.io.File;
 import org.xmpp.packet.Packet;
 import org.xmpp.packet.Message;
 import org.jivesoftware.openfire.session.Session;

 public class OpenGraphPlugin implements Plugin, PacketInterceptor  {
     private static final Logger Log = LoggerFactory.getLogger(OpenGraphPlugin.class);
     private InterceptorManager interceptorManager; 
    
     public OpenGraphPlugin() {
         interceptorManager = InterceptorManager.getInstance();
     }
   
     public void initializePlugin(PluginManager manager, File pluginDirectory) {
			Log.info(&quot;Open graph parser plugin initialize ...&quot;);
   		
			// Register a message interceptor manager
			interceptorManager.addInterceptor(this);       
     }

     public void destroyPlugin() {
			Log.info(&quot;Open graph parser plugin destory ...&quot;);
   		
			// Unregister a message interceptor manager
			interceptorManager.removeInterceptor(this);
     }
	
     @Override
     public void interceptPacket(Packet packet, Session session, boolean incoming, boolean processed)
             throws PacketRejectedException {
 		if(isValidTargetPacket(packet,incoming,processed)) {
     		Packet original = packet;               
                                   
     		if(original instanceof Message) {
         		Message receivedMessage = (Message)original;                           
         		String url = receivedMessage.getBody();
        		}      
			}
     }
	
     private boolean isValidTargetPacket(Packet packet, boolean incoming, boolean processed) {
     	return  !processed &amp;amp;&amp;amp; incoming &amp;amp;&amp;amp; packet instanceof Message;
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URL 여부를 판단한다.
 메시지가 URL인지 확인을 위해 isUrl 메소드를 추가하고, interceptPacket 메소드에 url 확인 코드를 추가한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @Override
 public void interceptPacket(Packet packet, Session session, boolean incoming, boolean processed)
         throws PacketRejectedException {

     if(isValidTargetPacket(packet,incoming,processed)) {
         Packet original = packet;			
						
         if(original instanceof Message) {
             Message receivedMessage = (Message)original;
				
             String url = receivedMessage.getBody();

             if (isUrl(url)) {
             	if (url.indexOf(&quot;http&quot;) &amp;lt; 0 &amp;amp;&amp;amp; url.indexOf(&quot;https&quot;) &amp;lt; 0) {
             		url = &quot;http://&quot; + url;
             	}	        	
		        	
             }
         }		
     }	
 }
	
 /**
  * URL 여부 체크
  * @param str
  * @return
  */
 private boolean isUrl(String str) {
     String regex = &quot;[(http(s)?):\\/\\/(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;amp;//=]*)&quot;;

     Pattern p = Pattern.compile(regex);
     Matcher m = p.matcher(str);

     if (m.find()) {
     	return true;
     } 
        
     return false;
 }    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Open graph 태그를 파싱한다.
 Open Graph 태그를 파싱 후 담을 객체를 생성한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; public class OpenGraphTag {
     String url;
 	String image;
 	String type;
 	String siteName;
 	String title;
 	String locale;
 	String description;
 	String createDate;

 	public String getUrl() {
     	return url;
 	}

 	public void setUrl(String url) {
     	this.url = url;
 	}

 	public String getImage() {
     	return image;
 	}

 	public void setImage(String image) {
     	this.image = image;
 	}

 	public String getType() {
     	return type;
 	}

 	public void setType(String type) {
     	this.type = type;
 	}

 	public String getSiteName() {
     	return siteName;
     }

 	public void setSiteName(String siteName) {
     	this.siteName = siteName;
 	}

 	public String getTitle() {
     	return title;
 	}

 	public void setTitle(String title) {
     	this.title = title;
 	}

 	public String getLocale() {
     	return locale;
 	}

 	public void setLocale(String locale) {
     	this.locale = locale;
 	}

 	public String getDescription() {
     	return description;
 	}

 	public void setDescription(String description) {
     	this.description = description;
 	}

 	public String getCreateDate() {
     	return createDate;
 	}

 	public void setCreateDate(String createDate) {
     	this.createDate = createDate;
 	}
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;현재 날짜와 캐시 기간 비교를 위해 날짜 유틸 클래스를 추가한다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;

 public class DateUtils {
     private static String DATE_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;

 	/**
  	* 현재 날짜 구하기
  	* @return
  	*/
 	public static String getCurrentDate() {
     	SimpleDateFormat date = new SimpleDateFormat(DATE_FORMAT);

     	Calendar cal = Calendar.getInstance();
     	String currentDate = date.format(cal.getTime());

     	return currentDate;
 	}

 	/**
  	* 날짜 비교
  	* @param date
  	* @return
  	*/
 	public static long getDiffDate(String date)
 	{
     	long diffDays = 0L;

     	try{
         	SimpleDateFormat format = new SimpleDateFormat( DATE_FORMAT);

         	Date FirstDate = format.parse(date);
         	Date SecondDate = format.parse(getCurrentDate());

         	long diffDate = FirstDate.getTime() - SecondDate.getTime();
         	long diffDateDays = diffDate / ( 24*60*60*1000);

         	diffDays = Math.abs(diffDateDays);
     	} catch(ParseException e) {
             e.printStackTrace();
  	   }

     	return diffDays;
 	}
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Open Graph 파싱을 위한 클래스를 추가한다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;

 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

 public class OpenGraphParser {
     public OpenGraphParser() {
 	}

 	public OpenGraphTag parser(String url) {
 		OpenGraphTag tag = new OpenGraphTag();
         Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; result = new HashMap&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;();
 	    String[] metas = new String[]{&quot;og:title&quot;, &quot;og:type&quot;, &quot;og:image&quot;, &quot;og:url&quot;, &quot;og:description&quot; };

     	try {
         	Document doc = Jsoup
                 .connect(url)
                 .get();

         	Elements elements = doc.select(&quot;meta[property^=og], meta[name^=og]&quot;);

         	for (Element elm : elements) {
                 String target= elm.hasAttr(&quot;property&quot;) ? &quot;property&quot; : &quot;name&quot;;

 	            if(!result.containsKey(elm.attr(target))){
     	            result.put(elm.attr(target), new ArrayList&amp;lt;String&amp;gt;());
         	    }

             	result.get(elm.attr(target)).add(elm.attr(&quot;content&quot;));
         	}

             // Open Graph 태그가 없는 경우 meta 태그와 본문에서 추출
         	for(String meta : metas){
             	if (!(result.containsKey(meta) &amp;amp;&amp;amp; result.get(meta).size() &amp;gt; 0)){
                 	if(meta.equals(metas[0])){
                     	result.put(metas[0]
                             , Arrays.asList(new String[]{doc.select(&quot;title&quot;).eq(0).text()}));
                 	} else if (meta.equals(metas[1])){
                     	result.put(metas[1]
                             , Arrays.asList(new String[]{&quot;website&quot;}));
                 	} else if (meta.equals(metas[2])){
                         result.put(metas[2]
                             , Arrays.asList(new String[]{doc.select(&quot;img&quot;).eq(0).attr(&quot;abs:src&quot;)}));
 	                } else if (meta.equals(metas[3])){
     	                result.put(metas[3]
         	                    , Arrays.asList(new String[]{doc.baseUri()}));
             	    } else if (meta.equals(metas[4])){
                 	    result.put(metas[4]
                             , Arrays.asList(new String[]{doc.select(&quot;meta[property=description], meta[name=description]&quot;).eq(0).attr(&quot;content&quot;)}));
                 	}
             	}
         	}

         	for(String meta : result.keySet()) {
             	if(meta.equals(metas[0])){
                 	tag.setTitle(result.get(meta).get(0));
             	} else if (meta.equals(metas[1])){
                     tag.setType(result.get(meta).get(0));
 	            } else if (meta.equals(metas[2])){
     	            tag.setImage(result.get(meta).get(0));
         	    } else if (meta.equals(metas[3])){
             	    tag.setUrl(result.get(meta).get(0));
             	} else if (meta.equals(metas[4])){
                 	tag.setDescription(result.get(meta).get(0));
             	}
         	}

         	tag.setCreateDate(DateUtils.getCurrentDate());
     	} catch (Exception e){
             e.printStackTrace();
         }

 	    return tag;
 	}
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;interceptPacket 메소드에 Open Graph 파싱 코드를 추가한다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @Override
 public void interceptPacket(Packet packet, Session session, boolean incoming, boolean processed)
                 throws PacketRejectedException {
 	if(isValidTargetPacket(packet,incoming,processed)) {
     	Packet original = packet;               
                                      
     	if(original instanceof Message) {
         	Message receivedMessage = (Message)original;
         	String url = receivedMessage.getBody();
            
             if (isUrl(url)) {
 	            if (url.indexOf(&quot;http&quot;) &amp;lt; 0 &amp;amp;&amp;amp; url.indexOf(&quot;https&quot;) &amp;lt; 0) {
     	            url = &quot;http://&quot; + url;
         	    }
                          
                 // 캐시 저장 확인
             	OpenGraphTag tag = map.get(url);
        
     			/ 캐시에 저장이 안되어 있거나 캐시 저장 기간을 초과한 경우 Open Graph 를 파싱 요청한다.
             	if (tag == null || (MAX_CACHE_DATE &amp;lt; DateUtils.getDiffDate(tag.getCreateDate()))) {
                 	OpenGraphParser parser = new OpenGraphParser();
                 	tag = parser.parser(url);
                 	map.put(url, tag);
             	}                          
         	}
     	}            
 	}      
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;패킷에 append 해서 브로드캐스팅 한다.
가로채기한 패킷에 “&lt;x xmlns=&quot;jabber:x:og&quot;&gt;&lt;/x&gt;” 엘리멘트를 추가하고, 하위에 “title, image, url, description” 추가한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private long MAX_CACHE_DATE = 1L;
private Map&amp;lt;String, OpenGraphTag&amp;gt; map = new ConcurrentHashMap&amp;lt;String, OpenGraphTag&amp;gt;();
    
@Override
public void interceptPacket(Packet packet, Session session, boolean incoming, boolean processed)
        throws PacketRejectedException {

    if(isValidTargetPacket(packet,incoming,processed)) {
        Packet original = packet;			
						
        if(original instanceof Message) {
            Message receivedMessage = (Message)original;
				
            String url = receivedMessage.getBody();

            if (isUrl(url)) {
            	if (url.indexOf(&quot;http&quot;) &amp;lt; 0 &amp;amp;&amp;amp; url.indexOf(&quot;https&quot;) &amp;lt; 0) {
            		url = &quot;http://&quot; + url;
            	}
		        	
            	OpenGraphTag tag = map.get(url);

                if (tag == null || (MAX_CACHE_DATE &amp;lt; DateUtils.getDiffDate(tag.getCreateDate()))) {
                    OpenGraphParser parser = new OpenGraphParser();
                    tag = parser.parser(url);
                    map.put(url, tag);
                }
			        				
                // 가로채기한 패킷에 Open Graph 정보 추가
                Element sendFileElement = receivedMessage.addChildElement(&quot;x&quot;, &quot;jabber:x:og&quot;);
                sendFileElement.addElement(&quot;title&quot;).setText(tag.getTitle());
                sendFileElement.addElement(&quot;image&quot;).setText(tag.getImage());
                sendFileElement.addElement(&quot;url&quot;).setText(tag.getUrl());
                sendFileElement.addElement(&quot;description&quot;).setText(tag.getDescription());	
            }
        }		
    }	
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;URL에 Open Graph 정보가 있거나, Meta 정보가 있는 경우에는 클라이언트에 아래와 비슷한 패킷을 받을 것이다. 클라이언트에서는 전달받은 패킷에서 “&lt;x xmlns=&quot;jabber:x:og&quot;&gt;&lt;/x&gt;” 엘리먼트를 파싱해서 UI에 사용하면 된다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;message xmlns=&quot;jabber:client&quot; to=&quot;user01@localhost/56pmeoc6xd&quot; from=&quot;room1@conference.localhost/user01&quot; type=&quot;groupchat&quot; id=&quot;4&quot;&amp;gt;
    &amp;lt;body&amp;gt;https://github.com&amp;lt;/body&amp;gt;
    &amp;lt;x xmlns=&quot;jabber:x:event&quot;&amp;gt;
        &amp;lt;composing/&amp;gt;
    &amp;lt;/x&amp;gt;
    &amp;lt;x xmlns=&quot;jabber:x:og&quot;&amp;gt;
        &amp;lt;title&amp;gt;Build software better, together&amp;lt;/title&amp;gt;
        &amp;lt;image&amp;gt;https://assets-cdn.github.com/images/modules/open_graph/github-logo.png&amp;lt;/image&amp;gt;
        &amp;lt;url&amp;gt;https://github.com&amp;lt;/url&amp;gt;
        &amp;lt;description&amp;gt;GitHub is where people build software. More than 27 million people use GitHub to discover, fork, and contribute to over 80 million projects.&amp;lt;/description&amp;gt;
    &amp;lt;/x&amp;gt;
    &amp;lt;data xmlns=&quot;jabber:x:data&quot; from=&quot;user@localhost&quot; roomID=&quot;8&quot; stamp=&quot;2018-04-20T00:51:22.939Z&quot;/&amp;gt;
&amp;lt;/message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Ant로 빌드한다.
openfire &amp;gt; build &amp;gt; build.xml 파일을 마우스 오른쪽으로 클릭 후 Run As &amp;gt; External Tools Configurations &amp;gt; Targets 에서 openfire 와 plugins 를 체크한다. 그리고, “Run” 버튼을 클릭해서 빌드를 한다.
빌드가 성공적으로 끝나면 /Openfire/target/openfire/plugins 폴더에서 opengraphe.jar 파일을 확인 할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전체 소스 코드는 &lt;a href=&quot;https://github.com/junglestory/openfire-opengraph&quot;&gt;Github repo&lt;/a&gt; 에서 다운로드 받을 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;open-graph-플러그인-설치&quot;&gt;Open graph 플러그인 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Admin Console의 Plugins 메뉴로 이동한다.&lt;/li&gt;
  &lt;li&gt;“파일 선택” 버튼을 클릭해서 /Openfire/target/openfire/plugins/opengraph.jar 파일을 선택한다.&lt;/li&gt;
  &lt;li&gt;“Upload Plugins” 버튼을 클릭한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://download.igniterealtime.org/openfire/docs/latest/documentation/plugin-dev-guide.html&quot;&gt;Openfire Plugin Developer Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://trvoid.blogspot.kr/2013/05/openfire.html&quot;&gt;[XMPP] Openfire 플러그인 개발하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/myriky/XMPP2APNS&quot;&gt;XMPP2APNS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">페이스북이나 카카오톡에서 URL 링크을 보내면 해당 URL 페이지의 미리보기(제목, 내용, 이미지… 등) 기능을 제공한다. Openfire에서는 아직 URL 미리보기 기능이 없기에 플러그인으로 구현하는 방법을 올려본다.</summary></entry><entry><title type="html">로컬 프로젝트를 Github에 등록 방법</title><link href="http://localhost:4000/tip-github" rel="alternate" type="text/html" title="로컬 프로젝트를 Github에 등록 방법" /><published>2018-04-05T00:00:00+09:00</published><updated>2018-04-05T00:00:00+09:00</updated><id>http://localhost:4000/tip-github</id><content type="html" xml:base="http://localhost:4000/tip-github">&lt;p&gt;Github을 사용해서 프로젝트를 관리하려면, Github 저장소를 로컬에 clone 해서 사용해야 하는데,
기존 프로젝트나 CLI(Command Line Interface) 등을 이용해서 프로젝트를 생성한 경우 Github에 등록하려면 오류가 발생한다.&lt;/p&gt;

&lt;p&gt;구글에 찾아보면 비슷한 방법들이 있는데, 최근에 Github 저장소를 생성했던 방법을 설명하겠다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;&lt;/strong&gt;에 저장소를 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로컬에 프로젝트를 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;로컬 프로젝트로 이동해서 로컬 저장소를 생성한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 파일을 저장소에 추가한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git add .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;로컬 저장소에 커밋한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git commit -m ‘Initial project'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Github에 생성한 원격 저장소를 추가한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git remote add origin https://github.com/[myaccount]/[myproject].git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;워킹 디렉토리의 파일을 저장한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git stash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;원격 저장소 파일을 로컬 저장소에 갱신한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;변경사항을 로컬 저장소에 커밋한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git commit -m ‘Merge project’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;로컬 저장소에 변경된 파일을 원격 저장소에 전송한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push --set-upstream origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Github을 사용해서 프로젝트를 관리하려면, Github 저장소를 로컬에 clone 해서 사용해야 하는데, 기존 프로젝트나 CLI(Command Line Interface) 등을 이용해서 프로젝트를 생성한 경우 Github에 등록하려면 오류가 발생한다.</summary></entry><entry><title type="html">Ionic3로 XMPP 멀티 채팅 구현</title><link href="http://localhost:4000/Ionic3-xmpp" rel="alternate" type="text/html" title="Ionic3로  XMPP 멀티 채팅 구현" /><published>2018-03-01T00:00:00+09:00</published><updated>2018-03-01T00:00:00+09:00</updated><id>http://localhost:4000/Ionic3-xmpp</id><content type="html" xml:base="http://localhost:4000/Ionic3-xmpp">&lt;p&gt;멀티 채팅 서버를 구현하기 위해 많이 찾아본 결과 오래전부터 사용해 왔고, 여전히 많이 사용중인
XMPP 프로토콜을 사용하는게 좋다고 생각을 했다.&lt;/p&gt;

&lt;p&gt;XMPP 프로토콜을 사용하는 오픈소스에는 ejabberd 와 Openfire가 있는데, 익숙한 언어인 자바로 개발된 Openfire를 선택했다.
Openfire와 현재 많이 사용되고 있는 메신저들과는 개념적으로 다른 부분이 있어서, 일부 기능에서는 커스텀이 필요했다.&lt;/p&gt;

&lt;p&gt;이 포스팅에서는 커스텀 내용 보다는 서버 설치와 클라이언트의 기본 사용법을 설명을 하려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;openfire-설치&quot;&gt;Openfire 설치&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;설치 파일을 &lt;strong&gt;&lt;a href=&quot;https://www.igniterealtime.org/downloads/&quot;&gt;다운로드&lt;/a&gt;&lt;/strong&gt; 받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다운로드 받은 설치 파일을 실행 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설치 &lt;strong&gt;언어&lt;/strong&gt; 설정을 한다.&lt;br /&gt;
&lt;img src=&quot;/images/ionic3-xmpp/install_language.png&quot; alt=&quot;install_language&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;라이선스에 동의를 한다.
&lt;img src=&quot;/images/ionic3-xmpp/license.png&quot; alt=&quot;license&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설치 경로를 입력한다.
&lt;img src=&quot;/images/ionic3-xmpp/install_path.png&quot; alt=&quot;install_path&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시작 메뉴와 바탕화면 바로가기를 설정 한다.
&lt;img src=&quot;/images/ionic3-xmpp/start_menu.png&quot; alt=&quot;start_menu&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Openfire 서버 서비스를 실행 한다. &lt;strong&gt;Finish&lt;/strong&gt; 버튼을 클릭 하면 설정 화면으로 실행 된다.
&lt;img src=&quot;/images/ionic3-xmpp/start_service.png&quot; alt=&quot;start_service&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;openfire-설정&quot;&gt;Openfire 설정&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Admin Console에서 사용할 &lt;strong&gt;언어&lt;/strong&gt;를 선택 한다.
&lt;img src=&quot;/images/ionic3-xmpp/config_language.png&quot; alt=&quot;config_language&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버의 &lt;strong&gt;Domain Name&lt;/strong&gt; 과 &lt;strong&gt;FQDN&lt;/strong&gt; 을 입력 한다.
&lt;img src=&quot;/images/ionic3-xmpp/config_setup_complete.png&quot; alt=&quot;config_setup_complete&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터베이스를 설정 한다.(별도의 데이터베이스를 사용하려면 &lt;strong&gt;“Standard Database Connection”&lt;/strong&gt; 을 선택하면 되는데, 사전에 &lt;strong&gt;데이터베이스&lt;/strong&gt;와 &lt;strong&gt;계정&lt;/strong&gt;이 준비되어 있어야 한다.)
&lt;img src=&quot;/images/ionic3-xmpp/config_database.png&quot; alt=&quot;config_database&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 프로필을 설정 한다.
&lt;img src=&quot;/images/ionic3-xmpp/config_profile.png&quot; alt=&quot;config_profile&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;관리자 계정을 설정 한다. (기본값은 &lt;strong&gt;admin&lt;/strong&gt; 이다.)
&lt;img src=&quot;/images/ionic3-xmpp/config_admin.png&quot; alt=&quot;config_admin&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“Login to the admin console”&lt;/strong&gt; 버튼을 클릭해서 &lt;strong&gt;Admin Console&lt;/strong&gt; 로 이동한다.
&lt;img src=&quot;/images/ionic3-xmpp/config_setup_complete.png&quot; alt=&quot;config_setup_complete&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;계정-생성&quot;&gt;계정 생성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://localhost:9090&quot;&gt;Admin Console&lt;/a&gt;&lt;/strong&gt; 에 로그인 한다.
&lt;img src=&quot;/images/ionic3-xmpp/adminconsole_login.png&quot; alt=&quot;adminconsole_login&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Users/Groups &amp;gt; Users &amp;gt;Create New User” 메뉴로 이동해서 계정을 생성 한다. (계정은 3개 이상 생성 한다.)
&lt;img src=&quot;/images/ionic3-xmpp/adminconsole_create_user.png&quot; alt=&quot;adminconsole_create_user&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;클라이언트-설치&quot;&gt;클라이언트 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git&lt;/a&gt;을 설치 한다.&lt;/li&gt;
  &lt;li&gt;Github 에서 소스를 Clone 한다.
    &lt;ul&gt;
      &lt;li&gt;명령 프롬프트를 실행 해서 아래 명령어를 실행 한다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/junglestory/xmpp-ionic3.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;&lt;img src=&quot;/images/ionic3-xmpp/git_clone.png&quot; alt=&quot;git_clone&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&lt;/a&gt;를 설치 한다.&lt;/li&gt;
  &lt;li&gt;명령 프롬프트를 새로 실행해서 소스 디렉토리로 이동 한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd xmpp-ionic3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;라이브러리를 업데이트 한다. (명령 프롬프트에서 아래 명령어를 실행 한다.)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Cordova와 Ionic을 설치 한다. (명령 프롬프트에서 아래 명령어를 실행 한다.)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g cordova ionic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;클라이언트-실행&quot;&gt;클라이언트 실행&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;명령 프롬프트에서 &lt;strong&gt;ionic serve&lt;/strong&gt; 를 입력 한다.
    &lt;ul&gt;
      &lt;li&gt;기본 브라우저로 클라이언트가 실행 된다.&lt;/li&gt;
      &lt;li&gt;URL은 http://localhost:9090 이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로그인 한다.
    &lt;ul&gt;
      &lt;li&gt;Admin Console에서 생성한 계정을 입력 한다.&lt;/li&gt;
      &lt;li&gt;소유하고 있는 도메인을 설정한 경우 &lt;strong&gt;Host&lt;/strong&gt;에 설정한 도메인을 입력 한다.
 &lt;img src=&quot;/images/ionic3-xmpp/client_login.png&quot; alt=&quot;client_login&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대화방 목록
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Chats&lt;/strong&gt; 메뉴를 클릭 한다.
 &lt;img src=&quot;/images/ionic3-xmpp/client_chats.png&quot; alt=&quot;client_chats&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대화방 생성
    &lt;ul&gt;
      &lt;li&gt;대화방 목록 우측 상단 &lt;strong&gt;”+”&lt;/strong&gt; 버튼을 클릭 한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Create Room&lt;/strong&gt; 에서 대화방 명을 입력 후 &lt;strong&gt;CREATE ROOM&lt;/strong&gt; 버튼을 클릭 한다.
 &lt;img src=&quot;/images/ionic3-xmpp/client_create_room.png&quot; alt=&quot;client_create_room&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대화방 참여
    &lt;ul&gt;
      &lt;li&gt;다른 계정으로 로그인 한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Chats&lt;/strong&gt; 메뉴를 클릭해서 대화방 목록으로 이동 한다.&lt;/li&gt;
      &lt;li&gt;대화방을 클릭 한다.
 &lt;img src=&quot;/images/ionic3-xmpp/client_room_list.png&quot; alt=&quot;client_room_list&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대화 상대 초대
    &lt;ul&gt;
      &lt;li&gt;대화방 목록 우측 상단 초대 버튼을 클릭 한다.  &lt;br /&gt;
 &lt;img src=&quot;/images/ionic3-xmpp/client_message2.png&quot; alt=&quot;client_message2&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Invite&lt;/strong&gt; 에서 계정(계정@도메인)을 입력 후 &lt;strong&gt;INVITE&lt;/strong&gt; 버튼을 클릭 한다.  &lt;br /&gt;
 &lt;img src=&quot;/images/ionic3-xmpp/client_invite.png&quot; alt=&quot;client_invite&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로그 아웃
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Settings&lt;/strong&gt; 메뉴로 이동해서 &lt;strong&gt;LOG OUT&lt;/strong&gt; 버튼을 클릭 한다.
 &lt;img src=&quot;/images/ionic3-xmpp/client_logout.png&quot; alt=&quot;client_logout&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">멀티 채팅 서버를 구현하기 위해 많이 찾아본 결과 오래전부터 사용해 왔고, 여전히 많이 사용중인 XMPP 프로토콜을 사용하는게 좋다고 생각을 했다.</summary></entry><entry><title type="html">Welcome to Ghost</title><link href="http://localhost:4000/welcome" rel="alternate" type="text/html" title="Welcome to Ghost" /><published>2017-07-27T19:00:00+09:00</published><updated>2017-07-27T19:00:00+09:00</updated><id>http://localhost:4000/welcome</id><content type="html" xml:base="http://localhost:4000/welcome">&lt;p&gt;Hey! Welcome to Ghost, it’s great to have you :)&lt;/p&gt;

&lt;p&gt;We know that first impressions are important, so we’ve populated your new site with some initial &lt;strong&gt;Getting Started&lt;/strong&gt; posts that will help you get familiar with everything in no time. This is the first one!&lt;/p&gt;

&lt;h3 id=&quot;there-are-a-few-things-that-you-should-know-up-front&quot;&gt;There are a few things that you should know up-front:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That’s who it works best for. If you’re using Ghost for some other purpose, that’s fine too - but it might not be the best choice for you.&lt;/li&gt;
  &lt;li&gt;The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so &lt;strong&gt;does&lt;/strong&gt; require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.&lt;/li&gt;
  &lt;li&gt;For the best experience we recommend downloading the Ghost Desktop App for your computer, which is the best way to access your Ghost site on a desktop device.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our &lt;a href=&quot;https://ghost.org/pricing&quot;&gt;Ghost(Pro)&lt;/a&gt; service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.&lt;/p&gt;

&lt;p&gt;The main thing you’ll want to read about next is probably: &lt;a href=&quot;https://demo.ghost.io/the-editor/&quot;&gt;the Ghost editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you’re done reading, you can simply delete the default &lt;strong&gt;Ghost&lt;/strong&gt; user from your team to remove all of these introductory posts!&lt;/p&gt;</content><author><name>Ghost</name></author><category term="Getting started" /><summary type="html">Hey! Welcome to Ghost, it’s great to have you :)</summary></entry></feed>